import React, { useState, useEffect } from 'react'

import './index.css'

import requests from './services/serverRequests.js'

import Filter from './components/Filter'
import Persons from './components/Persons'
import PersonForm from './components/PersonForm'
import Notification from './components/Notification'


const App = () => {
  // Array of person objects {name: __, number: __, id: __}.
  const [persons, setPersons] = useState([])
  // String for filtering results by name.
  const [nameFilter, setNameFilter] = useState('')
  // Details of person to be added.
  const [newName, setNewName] = useState('')
  const [newNumber, setNewNumber] = useState('')
  // Message to show on screen; an object {type:__, content:__}.
  const [message, setMessage] = useState(null)

  const handleNameFilterChange = event => setNameFilter(event.target.value)
  const handleNameChange = event => setNewName(event.target.value)
  const handleNumberChange = event => setNewNumber(event.target.value)

  // Array of persons whose names contain the filter string.
  const personsToShow = persons.filter(
    person => person.name.toLowerCase().indexOf(nameFilter.toLowerCase())>-1
    )

  // Sets message, then sets it back to null after five seconds.
  const setTempMessage = (msg_type, msg_content) => {
    setMessage({
      type: msg_type, 
      content: msg_content
      })
    setTimeout(() => setMessage(null), 5000)
    }

  /* Posts a new person to the server, optionally updating their data if
  they're already in the server.
  */
  const addPerson = event => {
    event.preventDefault()
    // id is generated by server, so omitted here.
    const newPerson = {name: newName, number: newNumber}
    const match = persons.find(p => p.name === newName)
    if (match) {
      if (window.confirm(
        `${newName} is already in the phonebook. Replace their number?`
        )) {
          requests
            .updateByID(match.id, newPerson)
            .then(data => {
              setPersons(persons.map(p => (p.id === match.id) ? data : p))
              setTempMessage(
                'success', `Updated ${newName}'s number to ${newNumber}.`
                )
              })
            .catch(() => {
              setPersons(persons.filter(person => person.id !== match.id))
              setTempMessage(
                'failure', `Update failed: ${match.name} had been deleted.`
              )})
          }
    } else {
      requests
        .create(newPerson)
        .then(personData => {
          setPersons(persons.concat(personData))
          setTempMessage('success', `Added ${newName}.`)
          })
        .catch(() =>
          setTempMessage('failure', `Failed to add ${newName}.`)
          )
      }
    setNewName('')
    setNewNumber('')
    }

  // Deletes a person from the server, given their id.
  const deletePerson = id => {
    const name = persons.find(p => p.id === id).name
    if (window.confirm(`Are you sure you want to delete ${name}?`)) {
      requests
        .deleteByID(id)
        .then(() => {
          setPersons(persons.filter(person => person.id !== id))
          setTempMessage('success', `Deleted ${name}.`)
          })
        .catch(() => {
          setPersons(persons.filter(person => person.id !== id))
          setTempMessage('failure',`${name} was already deleted.`)
          })
      }
    }

  // On first render, initialize persons array via HTTP request.
  useEffect(() => {
    requests
      .getAll()
      .then(data => setPersons(data))
    },
    [])

  return (
    <>
      <h2>Phonebook</h2>
      <Notification message={message}/>
      <Filter
        value={nameFilter}
        onChange={handleNameFilterChange}
      />
      <h2>Add a New Person</h2>
      <PersonForm 
        onSubmit={addPerson} 
        name={newName}
        onNameChange={handleNameChange}
        number={newNumber}
        onNumberChange={handleNumberChange}
      />
      <h2>Numbers</h2>
      <Persons toShow={personsToShow} deletionFn={deletePerson} />
    </>
  )
}


export default App