{"version":3,"sources":["services/serverRequests.js","components/Filter.js","components/Persons.js","components/PersonForm.js","components/Notification.js","App.js","index.js"],"names":["url","axios","get","then","response","data","obj","post","id","put","delete","Filter","props","value","onChange","Person","person","deletionFn","name","number","onClick","Persons","toShow","map","key","PersonForm","onSubmit","onNameChange","onNumberChange","type","Notification","message","className","content","App","useState","persons","setPersons","nameFilter","setNameFilter","newName","setNewName","newNumber","setNewNumber","setMessage","console","log","JSON","stringify","personsToShow","filter","toLowerCase","indexOf","setTempMessage","msg_type","msg_content","setTimeout","useEffect","requests","event","target","preventDefault","newInfo","newPerson","match","find","p","window","confirm","catch","err","savedPerson","error","addPerson","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4ca7d77.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n\r\nconst url = '/api/persons'\r\n\r\nconst getAll = () => \r\n  axios\r\n    .get(url)\r\n    .then(response => response.data)\r\n\r\nconst create = (obj) => \r\n  axios\r\n    .post(url, obj)\r\n    .then(response => response.data)\r\n\r\nconst updateByID = (id, obj) =>\r\n  axios\r\n    .put(`${url}/${id}`, obj)\r\n    .then(response => response.data)\r\n\r\nconst deleteByID = (id) =>\r\n  axios\r\n    .delete(`${url}/${id}`)\r\n    .then(response => response.data)\r\n\r\n\r\nexport default { getAll, create, updateByID, deleteByID } ","import React from 'react'\r\n\r\n\r\nconst Filter = (props) => {\r\n  return (\r\n    <form>\r\n      <div>\r\n        filter by name: <input\r\n          value={props.value}\r\n          onChange={props.onChange}\r\n        />\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nexport default Filter","import React from 'react'\r\n\r\n\r\nconst Person = ({ person, deletionFn }) => \r\n  <li>\r\n    {person.name} {person.number}\r\n    <button onClick={() => deletionFn(person.id)}>\r\n      delete\r\n    </button>\r\n  </li>\r\n\r\nconst Persons = ({ toShow, deletionFn }) =>\r\n  <ul>\r\n    {toShow.map(person => \r\n      <Person key={person.id} person={person} deletionFn={deletionFn}/>\r\n    )}\r\n  </ul>\r\n\r\n\r\nexport default Persons","import React from 'react'\r\n\r\n\r\nconst PersonForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.onSubmit}> \r\n    <div>\r\n      name: <input \r\n        value={props.name}\r\n        onChange={props.onNameChange}\r\n      />\r\n    </div>\r\n    <div>\r\n      number: <input \r\n        value={props.number}\r\n        onChange={props.onNumberChange}\r\n      />\r\n    </div>\r\n    <div>  \r\n        <button type=\"submit\">add</button>\r\n    </div>\r\n    </form>\r\n  )  \r\n}\r\n\r\n\r\nexport default PersonForm ","import React from 'react'\r\n\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  } else {\r\n    return (\r\n      <div className={message.type}>\r\n        {message.content}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\n\r\nimport './index.css'\r\n\r\nimport requests from './services/serverRequests.js'\r\n\r\nimport Filter from './components/Filter'\r\nimport Persons from './components/Persons'\r\nimport PersonForm from './components/PersonForm'\r\nimport Notification from './components/Notification'\r\n\r\n\r\nconst App = () => {\r\n  // Array of person objects {name: __, number: __, id: __}.\r\n  const [persons, setPersons] = useState([])\r\n  // String for filtering results by name.\r\n  const [nameFilter, setNameFilter] = useState('')\r\n  // Details of person to be added.\r\n  const [newName, setNewName] = useState('')\r\n  const [newNumber, setNewNumber] = useState('')\r\n  // Message to show on screen; an object {type:__, content:__}.\r\n  const [message, setMessage] = useState(null)\r\n\r\n  const handleNameFilterChange = event => setNameFilter(event.target.value)\r\n  const handleNameChange = event => setNewName(event.target.value)\r\n  const handleNumberChange = event => setNewNumber(event.target.value)\r\n\r\n  // Array of person objects whose names contain the filter string.\r\n  console.log(`persons is ${JSON.stringify(persons)}`)\r\n  const personsToShow = persons.filter(\r\n    person => person.name.toLowerCase().indexOf(nameFilter.toLowerCase())>-1\r\n    )\r\n\r\n  // Sets message, then sets it back to null after five seconds.\r\n  const setTempMessage = (msg_type, msg_content) => {\r\n    setMessage({\r\n      type: msg_type, \r\n      content: msg_content\r\n      })\r\n    setTimeout(() => setMessage(null), 5000)\r\n    }\r\n  \r\n  /* Replace a person's info.\r\n  Args:\r\n    person: {name: _, id: _}\r\n    newInfo: {name: _, number: _}\r\n  Fields other than those above are unused and unaffected.\r\n  */\r\n  const updatePerson = (person, newInfo) => {\r\n    requests\r\n      .updateByID(person.id, newInfo)\r\n      .then(data => {\r\n        setPersons(persons.map(p => (p.id === person.id) ? data : p))\r\n        setTempMessage(\r\n          'success', \r\n          `Updated ${person.name}'s info to ${JSON.stringify(newInfo)}.`\r\n        )\r\n      })\r\n      .catch(err => {\r\n        setTempMessage(\r\n          'failure', \r\n          `Failed to update ${person.name}'s info.\\n` + \r\n          JSON.stringify(err.response.data)\r\n        )\r\n      })\r\n  }\r\n\r\n  // Add a new person {name: _, number: _}.\r\n  const addPerson = (person) => {\r\n    requests\r\n      .create(person)\r\n      .then(savedPerson => {\r\n        setPersons([...persons, savedPerson])\r\n        setTempMessage('success', `Added ${person.name}.`)\r\n      })\r\n      .catch(err => setTempMessage(\r\n        'failure', \r\n        `Failed to add ${person.name}.\\n${err.response.data.error}`\r\n      ))\r\n  }\r\n\r\n  /* Add a new person, optionally updating their data if they're already in the server.\r\n  */\r\n  const handlePersonFormSubmit = event => {\r\n    event.preventDefault()\r\n    // id is generated by server, so omitted here.\r\n    const newPerson = {name: newName, number: newNumber}\r\n    const match = persons.find(p => p.name === newName)\r\n    if (match) {\r\n      if (window.confirm(`${newName} already exists. Replace their number?`)){\r\n        updatePerson(match, newPerson)\r\n      }\r\n    } else {\r\n      addPerson(newPerson)\r\n    }\r\n    setNewName('')\r\n    setNewNumber('')\r\n    }\r\n\r\n  // Deletes a person from the server, given their id.\r\n  const deletePerson = id => {\r\n    const name = persons.find(p => p.id === id).name\r\n    if (window.confirm(`Are you sure you want to delete ${name}?`)) {\r\n      setPersons(persons.filter(person => person.id !== id))\r\n      requests\r\n        .deleteByID(id)\r\n        .then(() => setTempMessage('success', `Deleted ${name}.`))\r\n        .catch(err => { \r\n          setTempMessage('failure',\r\n          `Failed to delete ${name}.\\n${err.response.data.error}`)\r\n          })\r\n      }\r\n    }\r\n\r\n  // On first render, initialize persons array via HTTP request.\r\n  useEffect(() => {\r\n    requests\r\n      .getAll()\r\n      .then(data => setPersons(data))\r\n    },\r\n    [])\r\n\r\n  return (\r\n    <>\r\n      <h2>Phonebook</h2>\r\n      <Notification message={message}/>\r\n      <Filter\r\n        value={nameFilter}\r\n        onChange={handleNameFilterChange}\r\n      />\r\n      <h2>Add a New Person</h2>\r\n      <PersonForm \r\n        onSubmit={handlePersonFormSubmit} \r\n        name={newName}\r\n        onNameChange={handleNameChange}\r\n        number={newNumber}\r\n        onNumberChange={handleNumberChange}\r\n      />\r\n      <h2>Numbers</h2>\r\n      <Persons toShow={personsToShow} deletionFn={deletePerson} />\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}